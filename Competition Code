package org.firstinspires.ftc;


import static java.lang.Thread.sleep;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

@TeleOp(name = "Competition Code", group = "Iterative OpMode")
public class fullNewCode extends OpMode {


    // Declare OpMode members
    private static final int INTAKE_MAX = 918;                                                       
    private static final int INTAKE_MIN = 0;
    private ElapsedTime runtime = new ElapsedTime();
    private boolean isServoOpen = false;
    private boolean isWristUsed = false;
    private DcMotor frontLeft = null;
    private DcMotor backLeft = null;
    private DcMotor frontRight = null;
    private DcMotor backRight = null;

    // Declare motors and servos
    private boolean lastAButtonState = false;
    private DcMotor linearMotor = null;

    private DcMotor intakeMotor = null;
    private DcMotor intakeMotor2 = null;
    private Servo intakeServo = null;  // Normal Servo
    private Servo continuousServo1 = null; // Continuous Servo 1





    private boolean bButtonPressed = false;  // Flag for single button press logic

    private Servo gripperServo = null;
    private Servo flipWrist = null;
    private Servo continuousServo = null;
    private boolean lastXButtonState = false;
    // Variables for control
    private boolean isSlowMode = false;
    private double intakeMotorPower = 0.8; // Power for intake motors


    // Flags for intake servo
    private boolean isIntakeServoDown = false; // Track whether the intake servo is down (0.0 position)

    // Linear motor position
    private static final int LINEAR_MIN = 0;

    @Override
    public void init() {
        // Initialize drive motors

        frontLeft = hardwareMap.get(DcMotor.class, "leftFront");
        backLeft = hardwareMap.get(DcMotor.class, "leftBack");
        frontRight = hardwareMap.get(DcMotor.class, "rightFront");
        backRight = hardwareMap.get(DcMotor.class, "rightBack");

        // Reverse right motors
        frontRight.setDirection(DcMotorSimple.Direction.REVERSE);
        backRight.setDirection(DcMotorSimple.Direction.REVERSE);

        // Initialize intake motors
        intakeMotor = hardwareMap.get(DcMotor.class, "barm");
        intakeMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        intakeMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        intakeMotor2 = hardwareMap.get(DcMotor.class, "parm");
        intakeMotor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        intakeMotor2.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        //intakeMotor2.setDirection(DcMotorSimple.Direction.REVERSE);

        // Initialize servos
        intakeServo = hardwareMap.get(Servo.class, "intakeServo");  // Normal servo
        continuousServo1 = hardwareMap.get(Servo.class, "cSv1");  // Continuous servo 1


        gripperServo = hardwareMap.get(Servo.class, "claw");
        flipWrist = hardwareMap.get(Servo.class, "wrist");

        // Initialize linear motor
        // Initialize linear motors
        linearMotor = hardwareMap.get(DcMotor.class, "arm");
        linearMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        linearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

// Initialize second linear motor (linearMotor2) and reverse it


    }

    @Override
    public void start() {
        runtime.reset();
    }

    @Override
    public void loop() {

        if (gamepad2.right_trigger > 0 && intakeMotor.getCurrentPosition() < INTAKE_MAX) {
            intakeMotor.setPower(intakeMotorPower * gamepad2.right_trigger);
            intakeMotor2.setPower(intakeMotorPower * gamepad2.right_trigger);
        } else if (gamepad2.left_trigger > 0 && intakeMotor.getCurrentPosition() > INTAKE_MIN) {
            intakeMotor.setPower(-intakeMotorPower * gamepad2.left_trigger);
            intakeMotor2.setPower(-intakeMotorPower * gamepad2.left_trigger);
        } else {
            intakeMotor.setPower(0);
            intakeMotor2.setPower(0);
        }

        // Check for slow mode toggle
        if (gamepad1.y && !isSlowMode) {
            isSlowMode = true; // Enable slow mode
            debounceDelay();
        } else if (gamepad1.y && isSlowMode) {
            isSlowMode = false; // Disable slow mode
            debounceDelay();
        }


        // Mecanum drive controls
        double y = gamepad1.left_stick_y;
        double x = -gamepad1.left_stick_x;
        double turn = -gamepad1.right_stick_x;

        double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(turn), 0.2);
        double speedFactor = isSlowMode ? 0.45 : 0.75; // Adjust speed based on mode

        // Calculate power for each wheel
        double frontLeftPower = ((y + x + turn) / denominator) * speedFactor;
        double backLeftPower = ((y - x + turn) / denominator) * speedFactor;
        double frontRightPower = ((y - x - turn) / denominator) * speedFactor;
        double backRightPower = ((y + x - turn) / denominator) * speedFactor;

        // Set power to wheels
        frontLeft.setPower(frontLeftPower);
        backLeft.setPower(backLeftPower);
        frontRight.setPower(frontRightPower);
        backRight.setPower(backRightPower);


        // Control linear motor using D-pad
        // Debugging telemetry for arm motor control
        if (gamepad2.dpad_up) {
            linearMotor.setTargetPosition(linearMotor.getCurrentPosition() + 100);
            linearMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            linearMotor.setPower(1.0);
        } else if (gamepad2.dpad_down) {
            linearMotor.setTargetPosition(linearMotor.getCurrentPosition() - 100);
            linearMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            linearMotor.setPower(1.0);
        }


        // Immediately set linear motor back to original position using B button


        // Reset B button press state



        // Intake motor control (Gamepad 2)



// Control intake wrist position with A and B buttons on gamepad1
        if (gamepad1.b) {
            intakeServo.setPosition(0.0);  // Move wrist down (e.g., 0.0 position)
        } else if (gamepad1.a) {
            intakeServo.setPosition(1.0);  // Move wrist back to start position (e.g., 1.0 position)
        }


        // Control intake servo: set to 180 degrees when intake motor reaches position 10

        // Intake Continuous Servo Control (via bumpers on gamepad1)
        if (gamepad1.left_bumper) {
            continuousServo1.setPosition(0.0);  // Move left (counter-clockwise)
        } else if (gamepad1.right_bumper) {
            continuousServo1.setPosition(1.0);  // Move right (clockwise)
        } else {
            continuousServo1.setPosition(0.5);  // Stop servo when no bumper is pressed
        }


        // Toggle servo open/close with X button
        if (gamepad2.x && !lastXButtonState) {
            isServoOpen = !isServoOpen;
            gripperServo.setPosition(isServoOpen ? 0.12 : 0.0);
        }
        lastXButtonState = gamepad2.x;
        // Toggle wrist with A button
        if (gamepad2.a && !lastAButtonState) {
            isWristUsed = !isWristUsed;
            flipWrist.setPosition(isWristUsed ? 0.72 : 0.0);
        }
        lastAButtonState = gamepad2.a;
        // Control continuous servos with bumpers (Gamepad 1)


        // Control intake servo: set to 180 degrees when intake motor reaches position 100
       /* if (intakeMotor.getCurrentPosition() >= 100) {
            intakeServo.setPosition(1.0);  // Set intake servo to 180 degrees (max position)
        }
*/
        // Continuous Servo control with bumpers (Gamepad 1)
        if (gamepad1.left_bumper) {
            continuousServo1.setPosition(0.0); // Move counter-clockwise (continuous servo)

        } else if (gamepad1.right_bumper) {
            continuousServo1.setPosition(1.0); // Move clockwise (continuous servo)

        } else {
            continuousServo1.setPosition(0.5); // Stop (neutral position)

        }



        // Telemetry data
        telemetry.addData("B Button Pressed", "Moving intake servo to 180 degrees");
        telemetry.addData("A Button Pressed", "Moving intake servo to 0 degrees");
        telemetry.addData("Linear Motor Position", linearMotor.getCurrentPosition());
        telemetry.addData("Gripper Servo Position", gripperServo.getPosition());
        telemetry.addData("Flip Wrist Position", flipWrist.getPosition());
        telemetry.addData("Front Left Ticks", frontLeft.getCurrentPosition());
        telemetry.addData("Back Left Ticks", backLeft.getCurrentPosition());
        telemetry.addData("Front Right Ticks", frontRight.getCurrentPosition());
        telemetry.addData("Back Right Ticks", backRight.getCurrentPosition());
        telemetry.addData("Linear Motor Position", linearMotor.getCurrentPosition());
        telemetry.addData("Intake Motor Position", intakeMotor.getCurrentPosition());
        telemetry.addData("Intake Servo Position", intakeServo.getPosition());


        telemetry.addData("Slow Mode", isSlowMode ? "ON" : "OFF");


        telemetry.update();
    }

    // Debounce delay to avoid multiple presses
    private void debounceDelay() {
        try {
            sleep(300); // Debounce delay
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}

// Houston we won!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
