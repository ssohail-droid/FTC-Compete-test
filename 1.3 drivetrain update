package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp(name="FTC Compet test ", group="Iterative OpMode")
public class BasicMecham extends OpMode {

   // Declare OpMode members
   private ElapsedTime runtime = new ElapsedTime();
   private DcMotor frontLeft = null;
   private DcMotor backLeft = null;
   private DcMotor frontRight = null;
   private DcMotor backRight = null;

   // Declare new motor and servo
   private DcMotor linearMotor = null;
   private Servo gripperServo = null;
   private Servo flipWrist =null;

   // Servo state variables
   private boolean isServoOpen = false;
   private boolean lastXButtonState = false;
   private boolean isWristUsed = false;
   private boolean lastAButtonState = false;

   @Override
   public void init() {

       // Initialize drive motors
       frontLeft  = hardwareMap.get(DcMotor.class, "0"); // changes by sohail 
       backLeft  = hardwareMap.get(DcMotor.class, "1"); // changes by sohail
       frontRight = hardwareMap.get(DcMotor.class, "2"); // changes by sohail
       backRight = hardwareMap.get(DcMotor.class, "3"); // changes by sohail

       // Reverse right motors
       frontRight.setDirection(DcMotorSimple.Direction.REVERSE);
       backRight.setDirection(DcMotorSimple.Direction.REVERSE);

       // Initialize linear motor and set encoder behavior
       linearMotor = hardwareMap.get(DcMotor.class, "arm"); // changes
       linearMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       linearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

       // Initialize
       gripperServo = hardwareMap.get(Servo.class, "claw");
       flipWrist = hardwareMap.get(Servo.class, "wrist"); // changes

       // Tell the driver that initialization is complete.
       telemetry.addData("Status", "Initialized");
   }

   @Override
   public void start() {
       runtime.reset();
   }

   @Override
   public void loop() {
       // Setup mecanum wheel drive variables
       double y = gamepad1.left_stick_y; // changes by sohail
       double x =  -gamepad1.left_stick_x; // changes by sohail
       double turn  =  -gamepad1.right_stick_x; // changes by sohail

       double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(turn), 0.2);//og.1 changes by Kezia

       // Calculate power for each wheel
       double frontLeftPower = ((y + x + turn) / denominator-.05)*0.5; // changes by Kezia
       double backLeftPower  = ((y - x + turn) / denominator+.2)*0.5; // changes by Kezia
       double frontRightPower = ((y - x - turn) / denominator-.05)*0.5; // changes by Kezia
       double backRightPower  = ((y + x - turn) / denominator)*0.5; // changes by Kezia

       // Set power to wheels

       frontLeft.setPower(frontLeftPower);
       backLeft.setPower(backLeftPower);
       frontRight.setPower(frontRightPower);
       backRight.setPower(backRightPower);

       // Motor encoder control using D-pad
       if (gamepad2.dpad_up) {
           linearMotor.setTargetPosition(linearMotor.getCurrentPosition() + 100); // changes need
           linearMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           linearMotor.setPower(1.0); // Adjust speed if necessary
       } else if (gamepad2.dpad_down) {
           linearMotor.setTargetPosition(linearMotor.getCurrentPosition() - 100); // changes need
           linearMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           linearMotor.setPower(1.0);
       }

       // Toggle servo open/close with X button
       if (gamepad2.x && !lastXButtonState) {  // Detect edge of button press
           isServoOpen = !isServoOpen;
           if (isServoOpen) {
               gripperServo.setPosition(0.12); // Open position changes
           } else {
               gripperServo.setPosition(0.0);  // Closed position changes
           }
       }
       lastXButtonState = gamepad2.x;  // Update last x button state


       if (gamepad2.a && !lastAButtonState) {  // Detect edge of button press
           isWristUsed = !isWristUsed;
           if (isWristUsed) {
               flipWrist.setPosition(0.72); // Open position changes
           } else {
               flipWrist.setPosition(0.0);  // Closed position changes
           }
       }
       lastAButtonState = gamepad2.a;  // Update last A frontRightPower, backRightPower);

       telemetry.addData("Linear Motor Position", linearMotor.getCurrentPosition());
       telemetry.addData("Servo Position", gripperServo.getPosition());
   }

}
